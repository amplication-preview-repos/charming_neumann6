/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Wig as PrismaWig,
  Review as PrismaReview,
  Category as PrismaCategory,
} from "@prisma/client";

export class WigServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WigCountArgs, "select">): Promise<number> {
    return this.prisma.wig.count(args);
  }

  async wigs(args: Prisma.WigFindManyArgs): Promise<PrismaWig[]> {
    return this.prisma.wig.findMany(args);
  }
  async wig(args: Prisma.WigFindUniqueArgs): Promise<PrismaWig | null> {
    return this.prisma.wig.findUnique(args);
  }
  async createWig(args: Prisma.WigCreateArgs): Promise<PrismaWig> {
    return this.prisma.wig.create(args);
  }
  async updateWig(args: Prisma.WigUpdateArgs): Promise<PrismaWig> {
    return this.prisma.wig.update(args);
  }
  async deleteWig(args: Prisma.WigDeleteArgs): Promise<PrismaWig> {
    return this.prisma.wig.delete(args);
  }

  async findReviews(
    parentId: string,
    args: Prisma.ReviewFindManyArgs
  ): Promise<PrismaReview[]> {
    return this.prisma.wig
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviews(args);
  }

  async getCategory(parentId: string): Promise<PrismaCategory | null> {
    return this.prisma.wig
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }
}
