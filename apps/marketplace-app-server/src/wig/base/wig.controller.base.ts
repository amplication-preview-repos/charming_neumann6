/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { WigService } from "../wig.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { WigCreateInput } from "./WigCreateInput";
import { Wig } from "./Wig";
import { WigFindManyArgs } from "./WigFindManyArgs";
import { WigWhereUniqueInput } from "./WigWhereUniqueInput";
import { WigUpdateInput } from "./WigUpdateInput";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { ReviewWhereUniqueInput } from "../../review/base/ReviewWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class WigControllerBase {
  constructor(
    protected readonly service: WigService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Wig })
  @nestAccessControl.UseRoles({
    resource: "Wig",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createWig(@common.Body() data: WigCreateInput): Promise<Wig> {
    return await this.service.createWig({
      data: {
        ...data,

        category: data.category
          ? {
              connect: data.category,
            }
          : undefined,
      },
      select: {
        category: {
          select: {
            id: true,
          },
        },

        color: true,
        createdAt: true,
        description: true,
        id: true,
        images: true,
        isAvailable: true,
        length: true,
        material: true,
        postedBy: true,
        price: true,
        style: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Wig] })
  @ApiNestedQuery(WigFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Wig",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async wigs(@common.Req() request: Request): Promise<Wig[]> {
    const args = plainToClass(WigFindManyArgs, request.query);
    return this.service.wigs({
      ...args,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        color: true,
        createdAt: true,
        description: true,
        id: true,
        images: true,
        isAvailable: true,
        length: true,
        material: true,
        postedBy: true,
        price: true,
        style: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Wig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Wig",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async wig(@common.Param() params: WigWhereUniqueInput): Promise<Wig | null> {
    const result = await this.service.wig({
      where: params,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        color: true,
        createdAt: true,
        description: true,
        id: true,
        images: true,
        isAvailable: true,
        length: true,
        material: true,
        postedBy: true,
        price: true,
        style: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Wig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Wig",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateWig(
    @common.Param() params: WigWhereUniqueInput,
    @common.Body() data: WigUpdateInput
  ): Promise<Wig | null> {
    try {
      return await this.service.updateWig({
        where: params,
        data: {
          ...data,

          category: data.category
            ? {
                connect: data.category,
              }
            : undefined,
        },
        select: {
          category: {
            select: {
              id: true,
            },
          },

          color: true,
          createdAt: true,
          description: true,
          id: true,
          images: true,
          isAvailable: true,
          length: true,
          material: true,
          postedBy: true,
          price: true,
          style: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Wig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Wig",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteWig(
    @common.Param() params: WigWhereUniqueInput
  ): Promise<Wig | null> {
    try {
      return await this.service.deleteWig({
        where: params,
        select: {
          category: {
            select: {
              id: true,
            },
          },

          color: true,
          createdAt: true,
          description: true,
          id: true,
          images: true,
          isAvailable: true,
          length: true,
          material: true,
          postedBy: true,
          price: true,
          style: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/reviews")
  @ApiNestedQuery(ReviewFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Review",
    action: "read",
    possession: "any",
  })
  async findReviews(
    @common.Req() request: Request,
    @common.Param() params: WigWhereUniqueInput
  ): Promise<Review[]> {
    const query = plainToClass(ReviewFindManyArgs, request.query);
    const results = await this.service.findReviews(params.id, {
      ...query,
      select: {
        comment: true,
        createdAt: true,
        id: true,
        rating: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        wig: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reviews")
  @nestAccessControl.UseRoles({
    resource: "Wig",
    action: "update",
    possession: "any",
  })
  async connectReviews(
    @common.Param() params: WigWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        connect: body,
      },
    };
    await this.service.updateWig({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reviews")
  @nestAccessControl.UseRoles({
    resource: "Wig",
    action: "update",
    possession: "any",
  })
  async updateReviews(
    @common.Param() params: WigWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        set: body,
      },
    };
    await this.service.updateWig({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reviews")
  @nestAccessControl.UseRoles({
    resource: "Wig",
    action: "update",
    possession: "any",
  })
  async disconnectReviews(
    @common.Param() params: WigWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        disconnect: body,
      },
    };
    await this.service.updateWig({
      where: params,
      data,
      select: { id: true },
    });
  }
}
